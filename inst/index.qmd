```{r "intro"}
#| echo: false
intro <- tryCatch(
    {
        description <- packageDescription("OHCA")
        pkg <- description$Package
        version <- description$Version
        authors <- eval(parse(text = description$Authors))
        license <- description$License
        glue::glue(
            "**Package:** {pkg}<br/>\n", 
            "**Authors:** {paste(format(authors, include = c('given', 'family', 'role')), collapse = ', ')}<br/>\n", 
            "**Compiled:** {as.character(Sys.Date())}<br/>\n", 
            "**Package version:** {version}<br/>\n", 
            "**R version:** <b style='color:red;'>{R.version.string}</b><br/>\n", 
            "**BioC version:** <b style='color:red;'>{BiocManager::version()}</b><br/>\n", 
            "**License:** {license}<br/>"
        )
    }, 
    error = function(e) {"Local preview"}
)
```

`r intro`

# Welcome {-}

This is the landing page of the **"Orchestrating Hi-C analysis with Bioconductor"** 
book. **The primary aim of this book is to introduce the `R` user to Hi-C analysis**. This 
book starts with key concepts important for the analysis of chromatin conformation capture and then 
presents `Bioconductor` tools that can be leveraged to process, analyze, explore and visualize 
Hi-C data. 

::: {.content-hidden when-format="pdf"}

## Table of contents {-}

This book is divided in three parts:  

**Part I: Introduction to Hi-C analysis**

- [Chapter 1: General principles and Hi-C data pre-processing](principles.qmd)
- [Chapter 2: The different R classes implemented to analyze Hi-C](data-representation.qmd)
- [Chapter 3: Manipulating Hi-C data in R](parsing.qmd)
- [Chapter 4: Hi-C data visualization](visualization.qmd)


**Part II: In-depth Hi-C analysis**

- [Chapter 5: Matrix-centric analysis](matrix-centric.qmd)
- [Chapter 6: Interactions-centric analysis](interactions-centric.qmd)
- [Chapter 7: Finding topological features from a Hi-C contact matrix](topological-features.qmd)


**Part III: Hi-C analysis workflows**

- [Data gateways: accessing public Hi-C data portals](disseminating.qmd)
- [Interoperability: Using HiCExperiment with other R packages](interoperability.qmd)
- [Workflow 1: Distance-dependent interactions across yeast mutants](workflow-yeast.qmd)
- [Workflow 2: Chromosome compartment cohesion upon mitosis entry](workflow-chicken.qmd)
- [Workflow 3: Inter-centromere interactions in yeast](workflow-centros.qmd)

:::

# Installation & requirements {-}

## General audience {-}

This books aims to demonstrate how to pre-process, parse and investigate Hi-C data in `R`. 
For this reason, a significant portion of this book consists of executable R code chunks. 
To be able to reproduce the examples demonstrated in this book and go further in the analysis of 
*your **real** datasets*, you will need to rely on several dependencies. 

- `R >= 4.3` is required. You can check R version by typing `version` in an R console or in RStudio. 
If you do not have `R >= 4.3` installed, you will need to update your `R` version, as most extra dependencies 
will require `R >= 4.3`. 

::: {.callout-note collapse="true"}

### Installing R 4.3 ðŸ‘‡

Detailed instructions are available [here](https://github.com/js2264/setup_ubuntu) to 
install `R 4.3` on a Linux machine (Ubuntu 22.04). 

Briefly, to install pre-compiled version of `R 4.3.0`: 

```{sh eval = FALSE}
# This is adapted from Posit (https://docs.posit.co/resources/install-r/)
export R_VERSION=4.3.0

# Install curl and gdebi-core
sudo apt update -qq
sudo apt install curl gdebi-core -y

# Fetching the `.deb` install file from Posit repository
curl -O https://cdn.rstudio.com/r/ubuntu-2204/pkgs/r-${R_VERSION}_1_amd64.deb

# Install R
sudo gdebi r-${R_VERSION}_1_amd64.deb --non-interactive -q

# Optional: create a symlink to add R to your PATH
sudo ln -s /opt/R/${R_VERSION}/bin/R /usr/local/bin/R
```

If you have some issues when installing the Hi-C packages listed below, you 
may need to install the following system libraries: 

```{sh eval = FALSE}
sudo apt update -qq
sudo apt install -y \
    automake make cmake fort77 gfortran \
    bzip2 unzip ftp build-essential \
    libc6 libreadline-dev \
    libpng-dev libjpeg-dev libtiff-dev \
    libx11-dev libxt-dev x11-common \
    libharfbuzz-dev libfribidi-dev \
    libfreetype6-dev libfontconfig1-dev \
    libbz2-dev liblzma-dev libtool \
    libxml2 libxml2-dev \
    libzstd-dev zlib1g-dev \
    libdb-dev libglu1-mesa-dev \
    libncurses5-dev libghc-zlib-dev libncurses-dev \
    libpcre3-dev libxml2-dev libblas-dev libzmq3-dev \
    libssl-dev libcurl4-openssl-dev \
    libgsl-dev libeigen3-dev libboost-all-dev \
    libgtk2.0-dev xvfb xauth xfonts-base apt-transport-https \
    libhdf5-dev libudunits2-dev libgdal-dev libgeos-dev \
    libproj-dev libnode-dev libmagick++-dev
```

:::

- `Bioconductor >= 3.18` is also required. You can check whether `Bioconductor` is available and its version in `R` by typing `BiocManager::version()`. If you do not have `BiocManager` >= 3.18 installed, you will need to update it as follows: 

```{r eval = FALSE}
if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install(version = "3.18")
```

- You will also need important packages, which will be described in length in this book. 
The following `R` code will set up most of the extra dependencies: 

```{r eval = FALSE}
BiocManager::install("HiCExperiment", ask = FALSE)
BiocManager::install("HiCool", ask = FALSE)
BiocManager::install("HiContacts", ask = FALSE)
BiocManager::install("HiContactsData", ask = FALSE)
BiocManager::install("fourDNData", ask = FALSE)
BiocManager::install("DNAZooData", ask = FALSE)
```

## Developers {-}

For developers or advanced R users, the `devel` versions of these packages 
can be installed along with their dependencies: 

```{r eval = FALSE}
install.packages("pak", repos = "https://r-lib.github.io/p/pak/devel/")
pak::pkg_install("js2264/HiCExperiment", ask = FALSE, dependencies = c("Depends", "Imports", "Suggests"))
pak::pkg_install("js2264/HiCool", ask = FALSE, dependencies = c("Depends", "Imports", "Suggests"))
pak::pkg_install("js2264/HiContacts", ask = FALSE, dependencies = c("Depends", "Imports", "Suggests"))
pak::pkg_install("js2264/HiContactsData", ask = FALSE, dependencies = c("Depends", "Imports", "Suggests"))
pak::pkg_install("js2264/fourDNData", ask = FALSE, dependencies = c("Depends", "Imports", "Suggests"))
pak::pkg_install("js2264/DNAZooData", ask = FALSE, dependencies = c("Depends", "Imports", "Suggests"))
```

## Docker image {-}

If you have `docker` installed, the easiest approach would be to run the following command in a `shell` terminal:

```{sh eval = FALSE}
docker run -it ghcr.io/js2264/ohca:latest R
```

This will fetch a `docker` image with the latest development versions of the 
aforementioned packages pre-installed, and initiate an interactive R session. 

# Reproducibility {-}

## Building book {-}

The OHCA book has been rendered in R thanks to a number of packages, including but not only: 

- `devtools`
- `quarto`
- `rebook`

To build this book locally, you can run: 

```{sh eval = FALSE, filename="bash"}
git clone git@github.com:js2264/OHCA.git && cd OHCA
quarto render
```

::: {.callout-warning}

All dependencies listed above will be required!

:::

The actual rendering of this book is done by GitHub Actions, and the 
rendered static website is hosted by GitHub Pages. 


# Session info {-}

::: {.callout-note collapse="true"}

## Click to expand ðŸ‘‡ {-}

```{r "session info"}
#| cache: false
sessioninfo::session_info(
    installed.packages()[,"Package"], 
    include_base = TRUE
)
```

:::
