# Interoperability: using HiCExperiment with other R packages

::: {.callout-note collapse="true"}

## Pre-loading packages and objects ðŸ“¦ {-}

```{r}
library(ggplot2)
library(purrr)
library(GenomicRanges)
library(InteractionSet)
library(HiCExperiment)
library(HiContactsData)
library(plyinteractions)
library(multiHiCcompare)
library(dplyr)
library(tidyr)
```

:::

::: {.callout-note}

## Aims

This notebook illustrates how to use a range of popular Hi-Câ€”related `R` packages with 
`HiCExperiment` objects. Conversion to the data structures supported by the 
following packages is illustrated here: 

- `diffHic`
<!-- - `hicrep` -->
- `multiHiCcompare`
- `TopDom`
- `GOTHiC`
<!-- - `HiCDOC` -->

:::

## diffHic

`diffHic` is the first R package dedicated to Hi-C processing and analysis (@Lun_2015). It is packed with 
useful functions to generate a contact matrix from read pairs and to perform downstream 
investigation, including normalization, 2D "peak" (i.e. loops) finding and aggregation, 
differential interaction between samples, etc. It works seamlessly with the `InteractionSet` 
class of object, which can be easily obtained from a `HiCExperiment` object. 

To do so, we first need to extract `GInteractions` from one or several `HiCExperiment` objects
and **create** a single `InteractionSet` object. 

```{r}
library(InteractionSet)
library(GenomicRanges)
library(HiCExperiment)
library(HiContactsData)

# ---- This downloads an example `.mcool` file and caches it locally 
coolf <- HiContactsData('yeast_wt', 'mcool')
cool <- import(coolf, format = 'cool')
gi <- cool |> 
    interactions() |> 
    as("ReverseStrictGInteractions")
iset <- InteractionSet(
    assays = list(
        counts = matrix(gi$count, ncol = 1), 
        balanced = matrix(gi$balanced, ncol = 1)
    ), 
    interactions = gi, 
    colData = data.frame(lib = c("WT"), totals = sum(gi$count))
)
```

From there, we can **filter** interactions to only retain those with significant 
enrichment over background. 

```{r}
library(diffHic)
set.seed(1234)

# --- Filter to find aggregated interactions
enrichments <- enrichedPairs(iset)
filter <- filterPeaks(enrichments, min.enrich = log2(1.2), min.diag = 5)
filtered_iset <- iset[filter]
filtered_iset

# --- Visualize filtered interactions 
library(plyinteractions)
library(HiContacts)
interactions(filtered_iset) |> 
    filter(seqnames2 == 'II', seqnames1 == seqnames2) |> 
    plotMatrix(use.scores = 'count')
```

Next, we can cluster filtered interactions that are next to each other. 

```{r}
# --- Cluster interactions to find loops
clustered_iset <- clusterPairs(filtered_iset, tol = 5000)
clustered_iset$interactions 

# --- Visualize clustered interactions 
interactions(filtered_iset) |> 
    mutate(cluster = clustered_iset$indices[[1]]) |> 
    filter(seqnames2 == 'II', seqnames1 == seqnames2) |> 
    plotMatrix(use.scores = 'cluster')
```

Finally, we can visualize identified individual interaction clusters identified with `diffHic` using `HiContacts`. 

```{r}
# --- Plot matrix at a clustered loops
cgi <- clustered_iset$interactions[554]
seqn <- seqnames(anchors(cgi, type="second"))
start <- start(anchors(cgi, type="second")) - 50000
end <- end(anchors(cgi, type="first")) + 50000
interactions_peak <- GRanges(seqn, IRanges(start, end))
p <- plotMatrix(cool[interactions_peak])

library(ggplot2)
an <- anchors(cgi)
p + geom_rect(
    data = data.frame(xmin = start(an[[2]]), xmax = end(an[[2]]), ymin = start(an[[1]]), ymax = end(an[[1]])), 
    aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), 
    inherit.aes = FALSE, 
    fill = NA, 
    colour = 'cyan'
)
```

## multiHiCcompare

The `multiHiCcompare` package provides functions for joint 
normalization and difference detection in multiple Hi-C datasets (@Stansfield_2019). 
According to its excerpt, to perform differential interaction analysis, 
it requires a `list` of **raw counts** for different 
samples/replicates, stored in **data frames with four columns** (`chr`, `start1`, `start2`, `count`).  
Manipulate a `HiCExperiment` object to coerce it into such structure is straightforward. 

```{r}
library(dplyr)
library(tidyr)
library(purrr)
coolf_wt <- HiContactsData('yeast_wt', 'mcool')
coolf_eco1 <- HiContactsData('yeast_eco1', 'mcool')
hics <- list(
    "wt" = import(coolf_wt, format = 'cool'),
    "eco1" = import(coolf_eco1, format = 'cool')
)
hics_list <- map(hics, ~ .x['XI'] |> 
    as.data.frame() |>
    mutate(chr = 1) |> 
    relocate(chr) |>
    select(chr, start1, start2, count)
)
head(hics_list[[1]])
```

Once this list is generated, the classical `multiHiCcompare` workflow can be applied: 
first run `make_hicexp()`, followed by `cyclic_loess()`, then `hic_exactTest()` and finally `results()`: 

```{r}
#| warning: false
DI <- hics_list |> 
    make_hicexp(
        data_list = hics_list, 
        groups = factor(c(1, 2))
    ) |> 
    cyclic_loess() |> 
    hic_exactTest() |> 
    results()
DI
```

## TopDom

The `TopDom` method is widely used to annotate topological domains in genomes from Hi-C 
data (@Shin_2015). The `TopDom` package was created to implement this method 
in `R` (@Bengtsson_2020).

Unfortunately, the format of the input to `TopDom` is rather tricky (see `?TopDom::readHiC`). 
The following chunk of code shows how to coerce a `HiCExperiment` object into a 
`TopDom`-compatible object. 

```{r}
library(TopDom)
hic <- import(coolf_wt, format = 'cool')
HiCExperiment2TopDom <- function(hic, chr) {
    data <- list()
    cm <- as(hic[chr], 'ContactMatrix')
    data$counts <- as.matrix(cm) |> base::as.matrix()
    data$counts[is.na(data$counts)] <- 0
    data$bins <- regions(cm) |> 
        as.data.frame() |> 
        select(seqnames, start, end) |>
        mutate(seqnames = as.character(seqnames)) |>
        mutate(id = 1:n(), start = start - 1) |> 
        relocate(id) |> 
        dplyr::rename(chr = seqnames, from.coord = start, to.coord = end)
    class(data) <- 'TopDomData'
    return(data)
}
hic_topdom <- HiCExperiment2TopDom(hic, "II")
hic_topdom
```

Now that we have coerced a `HiCExperiment` object into a `TopDom`-compatible 
object, we can use the main `TopDom` function to annotate topological domains. 

```{r}
domains <- TopDom::TopDom(hic_topdom, window.size = 5)
domains
```

The resulting `domains` object can be used to extract annotated domains, 
store them in `topologicalFeatures` of the original `HiCExperiment`, and 
optionally write a `bed` file to export them in text. 

```{r}
topologicalFeatures(hic, 'domain') <- domains$bed |> 
    mutate(chromStart = chromStart + 1) |> 
    filter(name == 'domain') |> 
    makeGRangesFromDataFrame()
topologicalFeatures(hic, 'domain')

rtracklayer::export(topologicalFeatures(hic, 'domain'), 'hic_domains.bed')
```

## GOTHiC

`GOTHiC` relies on a cumulative binomial test to detect interactions between distal genomic loci that have significantly more reads than expected by chance in Hi-C experiments (@Mifsud_2017). 

::: {.callout-important icon='true'}

### Using the `GOTHiC` function

Unfortunately, the main `GOTHiC` function 
require two `.bam` files as input. These files are often deleted due to 
their larger size, while the filtered `pairs` file itself is retained. 

Moreover, the internal nuts and bolts of the main `GOTHiC` function perform 
several operations that are not required in modern workflows: 

1. [Filtering pairs from same restriction fragment](https://code.bioconductor.org/browse/GOTHiC/blob/RELEASE_3_17/R/GOTHiC.R#L814); this step is now usually taken care of automatically, e.g. with `HiCool` Hi-C processing package. 
2. [Filtering short-range pairs](https://code.bioconductor.org/browse/GOTHiC/blob/RELEASE_3_17/R/GOTHiC.R#L826); the `GOTHiC` package hard-codes a 10kb lower threshold for minimum pair distance. More advanced optimized filtering approaches have been implemented since then, to circumvent the need for such hard-coded threshold.
3. [Binning pairs](https://code.bioconductor.org/browse/GOTHiC/blob/RELEASE_3_17/R/GOTHiC.R#L834); this step 
is also already taken care of, when working with Hi-C matrices in modern formats, e.g. with `.(m)cool` files. 

:::

Based on these facts, we can simplify the binomial test function provided by 
`GOTHiC` so that it can directly used binned interactions imported as a 
`HiCExperiment` object in `R`. 

```{r}
#| code-fold: true
#| code-summary: "Show the code for `GOTHiC_binomial` function"
GOTHiC_binomial <- function(x) {

    if (length(trans(x)) != 0) stop("Only `cis` interactions can be used here.")
    ints <- interactions(x) |>
        as.data.frame() |> 
        select(seqnames1, start1, seqnames2, start2, count) |>
        dplyr::rename(chr1 = seqnames1, locus1 = start1, chr2 = seqnames2, locus2 = start2, frequencies = count) |>
        mutate(locus1 = locus1 - 1, locus2 = locus2 - 1) |>
        mutate(int1 = paste0(chr1, '_', locus1), int2 = paste0(chr2, '_', locus2))
    
    numberOfReadPairs <- sum(ints$frequencies)
    all_bins <- unique(c(unique(ints$int1), unique(ints$int2)))
    all_bins <- sort(all_bins)
    upperhalfBinNumber <- (length(all_bins)^2 - length(all_bins))/2

    cov <- ints |> 
        group_by(int1) |> 
        tally(frequencies) |> 
        full_join(ints |> 
            group_by(int2) |> 
            tally(frequencies), 
            by = c('int1' = 'int2')
        ) |> 
        rowwise() |> 
        mutate(coverage = sum(n.x, n.y, na.rm = TRUE)) |> 
        ungroup() |>
        mutate(relative_coverage = coverage/sum(coverage))
    
    results <- mutate(ints,
        cov1 = left_join(ints, select(cov, int1, relative_coverage), by = c('int1' = 'int1'))$relative_coverage, 
        cov2 = left_join(ints, select(cov, int1, relative_coverage), by = c('int2' = 'int1'))$relative_coverage,
        probability = cov1 * cov2 * 2 * 1/(1 - sum(cov$relative_coverage^2)),
        predicted = probability * numberOfReadPairs
    ) |> 
    rowwise() |>
    mutate(
        pvalue = binom.test(
            frequencies, 
            numberOfReadPairs, 
            probability,
            alternative = "greater"
        )$p.value
    ) |> 
    ungroup() |> 
    mutate(
        logFoldChange = log2(frequencies / predicted), 
        qvalue = stats::p.adjust(pvalue, method = "BH", n = upperhalfBinNumber)
    )

    scores(x, "probability") <- results$probability
    scores(x, "predicted") <- results$predicted
    scores(x, "pvalue") <- results$pvalue
    scores(x, "qvalue") <- results$qvalue
    scores(x, "logFoldChange") <- results$logFoldChange

    return(x)

} 
```

```{r}
res <- GOTHiC_binomial(hic["II"])
res

interactions(res)
```

<!-- ## HiCDOC -->

# Session info {-}

::: {.callout-note collapse="true"}

## Click to expand ðŸ‘‡ {-}

```{r "session info"}
#| cache: false
sessioninfo::session_info(include_base = TRUE)
```

:::

# References {-}
