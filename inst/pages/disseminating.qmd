# Data gateways: accessing public Hi-C data portals

::: {.callout-note collapse="true"}

## Pre-loading packages and objects ðŸ“¦ {-}

```{r}
library(ggplot2)
library(GenomicRanges)
library(InteractionSet)
library(HiCExperiment)
library(fourDNData)
library(DNAZooData)
library(rtracklayer)
```

:::

::: {.callout-note}

## Aims
This chapter focuses on introducing two important portals hosting 
public Hi-C datasets: the [4DN Consortium](https://www.4dnucleome.org/) 
and the [DNA Zoo project](https://www.dnazoo.org/). Two `R` packages provide 
a programmatic access to these portals:

- `fourDNData`
- `DNAZooData`

:::

The Hi-C experimental approach has gained significant traction across multiple 
fields related to genome biology, and several consortia developed large-scale 
programs based on this technique. The `fourDNData` and `DNAZooData` R packages 
were designed to accelerate the investigation of chromatin structure 
using these public resources. 

## 4DN data portal

The 4D Nucleome Data Coordination and Integration Center 
([DCIC](http://dcic.4dnucleome.org/)) has developed and actively maintains a 
[data portal](https://data.4dnucleome.org/browse) providing public access to 
a wealth of resources to investigate 3D chromatin architecture. Notably, 
3D chromatin conformation libraries relying on different technologies 
("in situ" or "dilution" Hi-C, Capture Hi-C, Micro-C, DNase Hi-C, ...), 
generated by 50+ collaborating labs, were homogeneously processed, 
yielding more than 350 sets of processed files. 

`fourDNData` (read *4DN-Data*) is a package giving programmatic access 
to these uniformly processed Hi-C contact files. 

The `fourDNData()` function provides a gateway to 4DN-hosted Hi-C files, 
including contact matrices (in `.hic` or `.mcool`) and other Hi-C derived 
files such as annotated compartments, domains, insulation scores, or 
`.pairs` files.

```{r}
library(fourDNData)
head(fourDNData())
```

### Querying individual files

The `fourDNData()` function can be used to directly fetch specific files 
from the 4DN data portal: 

```{r}
cf <- fourDNData(experimentSetAccession = '4DNESJNPEKZD', type = 'mcool')
```

This effectively downloads and caches the queried file locally. 

```{r}
cf

availableChromosomes(cf)

availableResolutions(cf)

import(cf, focus = "chr4:10000001-20000000", resolution = 5000)
```

Different Hi-C related genomic files are provided by the 4DN consortium. The 
type of file to fetch can be specified with the `type` argument: 

- `type = 'pairs'` will fetch the pairs file which was generated by the 4DN consortium and binned 
into a contact matrix. Once fetched from the 4DN data portal, the local file can be imported in `R` using the `import` function, which will generate a `GInteractions` object. 

```{r eval = FALSE}
## Not evaluated for now
pairs_f <- fourDNData(experimentSetAccession = '4DNESJNPEKZD', type = 'pairs') 
print(pairs_f)
import(pairs_f)
```

::: {.callout-warning}

#### Watch out
`.pairs` files can be particularly large and therefore will take both and long time to download and 
a large storage footprint. 

:::

- `type = 'insulation'` will fetch a `.bigwig` track file precomputed by the 4DN consortium. This track corresponds to the genome-wide insulation score computed by `cooltools` as described in @Crane_2015. To know more about this, read [the excerpt from 4DN data portal](https://data.4dnucleome.org/resources/data-analysis/insulation_compartment_scores#insulation_scores_and_boundaries_page_all). Once fetched from the 4DN data portal, the local file can be imported in `R` using the `import` function, which will generate a `RleList` object. 

```{r}
library(rtracklayer)
fourDNData(experimentSetAccession = '4DNES25ABNZ1', type = 'insulation') |> 
    import(as = 'Rle')
```

- `type = 'boundaries'` will fetch a `.bed` file precomputed by the 4DN consortium, listing the annotated borders between topological domains. These borders correspond to local minima identified from the genome-wide insulation track. It can also be imported in `R` using the `import` function, which will 
generate a `GRanges` object. 

```{r}
fourDNData(experimentSetAccession = '4DNES25ABNZ1', type = 'boundaries') |> 
    import()
```

- `type = 'compartments'` will fetch a `.bigwig` track file precomputed by the 4DN consortium. This track corresponds to the selected genome-wide eigenvector computed by `cooltools` and representing A/B compartments. To know more about this, read [the excerpt from 4DN data portal](https://data.4dnucleome.org/resources/data-analysis/insulation_compartment_scores#compartments_page_all). Once fetched from the 4DN data portal, the local file can be imported in `R` using the `import` function, which will generate a `RleList` object. The score represents the eigenvector values, and by convention a genomic bin with a positive score is associated with the A compartment whereas a genomic bin with a negative score is associated with the B compartment. 

```{r}
fourDNData(experimentSetAccession = '4DNES25ABNZ1', type = 'compartments') |> 
    import()
```

### Querying a complete experiment dataset

Rather than importing multiple files corresponding to a single experimentSet 
accession ID one by one, one can import all the available files associated with 
a experimentSet accession ID into a `HiCExperiment` object by using the 
`fourDNHiCExperiment()` function.

```{r}
hic <- fourDNHiCExperiment('4DNESJNPEKZD')
```

This is a more efficient way to import datasets, as it aggregates the different 
bits together into a single `HiCExperiment` object with populated `topologicalFeatures` 
and `metadata` slots. 

```{r}
hic
```

```{r}
metadata(hic)
```

## DNA Zoo 

The [DNA Zoo Consortium](https://www.dnazoo.org/) 
is a collaborative group whose aim is to correct and refine genome assemblies
across the tree of life using Hi-C approaches. As of 2023, they have 
performed Hi-C across more than 300 animal, plant and fungi species. 

`DNAZooData` is a package giving programmatic access 
to these uniformly processed Hi-C contact files, as well as the refined genome
assemblies. 

The `DNAZooData()` function provides a gateway to DNA Zoo-hosted Hi-C files, 
fetching and caching relevant contact matrices in `.hic` format
It returns a `HicFile` object, which can then be imported in memory using 
`import()`. 

```{r}
library(DNAZooData)
head(DNAZooData())
```

For example, we can directly fetch a Hi-C dataset generated from a tardigrade sample 
by specifying the right `species` argument. 

```{r}
hicfile <- DNAZooData(species = 'Hypsibius_dujardini')

hicfile
```

Here again, the resulting `HicFile` is populated with metadata parsed from the 
DNA Zoo data portal. 

```{r}
metadata(hicfile)$organism
```

`HiCFile` metadata also points to a URL to directly fetch the genome assembly 
corrected by the DNA Zoo consortium.

```{r}
metadata(hicfile)$assemblyURL
```

# Session info {-}

::: {.callout-note collapse="true"}

## Click to expand ðŸ‘‡ {-}

```{r "session info"}
#| cache: false
sessioninfo::session_info(include_base = TRUE)
```

:::

# References {-}
