---
title: "Investigating chromatin remodeling during mitozis entry with 4DN Hi-C data"
date: "2023-01-12"
author: Jacques SERIZAY
format:
    html:
        theme: [cosmo, theme-cosmo.scss]
        highlight: tango
        toc: true
        toc-depth: 3
        number-sections: true
        self-contained: true
        embed-resources: true
---

```{r, include=FALSE}
knitr::opts_chunk$set(
    layout = 'l-page', 
    echo = TRUE, 
    warning = FALSE, error = FALSE, message = FALSE
)
```

**Aim:** This notebook illustrates how to recover Hi-C data from 4DN data portal 
using the `fourDNAData` interface and dig into A/B compartment remodeling in 
chiken cells entering mitosis (from Gibcus et al. 2018). 

```{r}
library(tidyverse)
devtools::load_all('~/repos/HiCExperiment')
devtools::load_all('~/repos/fourDNData/')
devtools::load_all('~/repos/HiContacts')
```

## Import data with fourDNData 

We are interested in `.mcool` files from Gibcus et al., 2018, hosted by the 4DN consortium. 
We well focus on 5 timepoints: 

- G2 block
- Prophase (5min)
- Prophase (10min)
- Prometaphase (15min)
- Prometaphase (30min)

```{r}
fourDNData::fourDNData() |> 
    dplyr::filter(
        'Gibcus JH et al. (2018)' == publication, 
        'HiC on sync. chicken cells' == dataset, 
        'mcool' == fileType
    )
l <- list(
    '4DNES9LEZXN7' = 'G2 block', 
    '4DNESNWWIFZU' = 'prophase (5m)', 
    '4DNESGDXKM2I' = 'prophase (10m)', 
    '4DNESIR416OW' = 'prometaphase (15m)', 
    '4DNESS8PTK6F' = 'prometaphase (30m)' 
)
hics <- BiocParallel::bplapply(
    names(l), 
    function(.x) fourDNData::fourDNHiCExperiment(.x), 
    BPPARAM = BiocParallel::MulticoreParam(workers = 5, progressbar = TRUE)
)
names(hics) <- l
```

To quickly inspect the data, we can plot the Hi-C map of a chosen chromosome 
for each sample.

```{r}
pl <- imap(hics, ~ refocus(.x, 'chr3') |> 
    zoom(100000) |> 
    plotMatrix(use.scores = 'balanced', limits = c(-4, -1)) + ggtitle(.y)
)
p_maps <- cowplot::plot_grid(plotlist = pl, nrow = 1)
p_maps
```

We can then compute eigen vectors for each sample. 

```{r eval = FALSE}
chrs <- seqnames(seqinfo(hics[[1]]))[seqlengths(seqinfo(hics[[1]])) > 2e6]
hics_comps <- imap(hics, ~ getCompartments(
    .x, 
    resolution = 250000, 
    chromosomes = chrs, 
    genome = BSgenome.Ggallus.UCSC.galGal5::BSgenome.Ggallus.UCSC.galGal5, 
    BPPARAM = BiocParallel::SerialParam(progressbar = TRUE)
))
## - To export phased compartment eigenvectors
imap(hics_comps, ~ metadata(.x)$eigens |> 
    GenomicRanges::coverage(weight = 'eigen') |>
    rtracklayer::export(paste0('eigens_', .y, '.bw'))
) 
```

Once we have calculated/phased the eigenvector corresponding to compartments, 
it is easy to generate saddle plots. 

```{r}
p <- imap(hics, ~ plotSaddle(.x, nbins = 38, BPPARAM = BiocParallel::SerialParam()) + ggtitle(.y)) 
p_saddles <- cowplot::plot_grid(plotlist = p, nrow = 1)
p_saddles
```

We can plot a focus on a zoomed chromosome, with G2 compartments,
to see what changes between G2, prophase (5min) and prometaphase (30min). 

```{r}
.chr <- 'chr4'
.start <- 59000000
.stop <- 75000000
coords <- paste0(.chr, ':', .start, '-', .stop)
A <- reduce(metadata(hics[[1]])$eigens[metadata(hics[[1]])$eigens$eigen > 0])
B <- reduce(metadata(hics[[1]])$eigens[metadata(hics[[1]])$eigens$eigen < 0])
A$ID <- paste0('A_', 1:length(A))
B$ID <- paste0('B_', 1:length(B))
a <- geom_rect(
    data = subsetByOverlaps(A, GRanges(coords)) |> 
        as.data.frame() |> 
        mutate(start = pmax(start, .start), end = pmin(end, .stop)
    ), 
    aes(xmin = start, xmax = end, ymin = -500000, ymax = 0), 
    fill = '#da2a2a', 
    col = 'black', 
    inherit.aes = FALSE
)
b <- geom_rect(
    data = subsetByOverlaps(B, GRanges(coords)) |> 
        as.data.frame() |> 
        mutate(start = pmax(start, .start), end = pmin(end, .stop)
    ), 
    aes(xmin = start, xmax = end, ymin = -500000, ymax = 0), 
    fill = '#cbcbcb', 
    col = 'black', 
    inherit.aes = FALSE
)
x1 <- refocus(hics[[1]], coords) |> 
    zoom(100000) |> 
    autocorrelate()
x2 <- refocus(hics[[2]], coords) |> 
    zoom(100000) |> 
    autocorrelate()
x3 <- refocus(hics[[5]], coords) |> 
    zoom(100000) |> 
    autocorrelate()
p_maps_zoom <- cowplot::plot_grid(
    plotMatrix(
        x1,
        use.scores = 'autocorrelated', 
        scale = 'linear', 
        limits = c(-1, 1), 
        cmap = bwrColors(), 
        maxDistance = 10000000
    ) + ggtitle('G2') + a + b,
    plotMatrix(
        x2,
        use.scores = 'autocorrelated', 
        scale = 'linear', 
        limits = c(-1, 1), 
        cmap = bwrColors(), 
        maxDistance = 10000000
    ) + ggtitle('Prophase 5min') + a + b,
    plotMatrix(
        x3,
        use.scores = 'autocorrelated', 
        scale = 'linear', 
        limits = c(-1, 1), 
        cmap = bwrColors(), 
        maxDistance = 10000000
    ) + ggtitle('Prometap. 30min') + a + b,
    nrow = 1
)
p_maps_zoom
```

We can then compute the average interaction between pairs of compartments (A-A, 
A-B, B-A, BB) and plot the distribution for each sample. 

```{r}
comps <- sort(c(A, B))
n <- seqnames(seqinfo(.x))[seqlengths(seqinfo(.x)) > 2e6]
df <- imap(hics[c(1, 2, 5)], ~ {
    lapply(n, function(chr) {
        x <- detrend(cis(.x[chr]))
        ints <- interactions(x)
        ints <- ints[pairdist(ints) > 5e6]
        an <- anchors(ints)
        data.frame(
            bin1 = plyranges::join_nearest(resize(an[[1]], fix = 'center', width = 1), comps)$ID, 
            bin2 = plyranges::join_nearest(resize(an[[2]], fix = 'center', width = 1), comps)$ID, 
            score = ints$detrended
        ) |> 
            drop_na() |> 
            group_by(bin1, bin2) |> 
            summarize(score = mean(score))
    }) |> bind_rows() |> mutate(sample = factor(.y, c(names(hics[c(1, 2, 5)]))))
}) |> bind_rows()
df$type <- case_when(
    grepl('A', df$bin1) & grepl('A', df$bin2) ~ 'AA',
    grepl('B', df$bin1) & grepl('B', df$bin2) ~ 'BB',
    grepl('A', df$bin1) & grepl('B', df$bin2) ~ 'AB',
    grepl('B', df$bin1) & grepl('A', df$bin2) ~ 'BA'
) |> as.factor()
p_interactions <- ggplot(df, aes(x = type, y = score, group = type, fill = type)) + 
    geom_boxplot(outlier.color = NA) + 
    facet_wrap(~sample) + 
    theme_bw() + 
    ylim(c(-2, 2))
p_interactions
```


## Generate final figure

```{r compile_plots}
library(patchwork)
# p_maps
# p_saddles
# p_maps_zoom
# p_interactions

layout <- "
AAAA
BBBB
CCCD
"

p_final <- p_maps + p_saddles + p_maps_zoom + p_interactions + plot_layout(design = layout)
ggsave('mitosis.pdf', width = unit(21, 'cm'), height = unit(10, 'cm'))
```



