---
filters:
  - _extensions/pandoc-ext/section-bibliographies/section-bibliographies.lua
reference-section-title: References
bibliography: bibliography.bib
---

# Matrix-centric analysis

```{r}
#| echo: false
#| results: "hide"
#| message: false
#| warning: false
source("_common.R")
library(ggplot2)
library(GenomicRanges)
library(InteractionSet)
library(HiCExperiment)
library(HiContactsData)
library(HiContacts)
library(rtracklayer)
coolf <- HiContactsData('yeast_wt', 'mcool')
cf <- CoolFile(coolf)
hic <- import(cf, focus = 'II', resolution = 2000)
data(centros_yeast)
topologicalFeatures(hic, 'centromeres') <- centros_yeast
hic_eco1 <- import(
    CoolFile(HiContactsData('yeast_eco1', 'mcool')), 
    focus = 'II', 
    resolution = 2000
)
```

::: {.callout-note}
## Aims
This chapter focuses on the various analytical tools offered by `HiContacts`
to compute matrix-related metrics from a `HiCExperiment` object.
:::

In the first part of this book, we have seen how to query parts or all of the 
data contained in Hi-C contact matrices using the `HiCExperiment` object 
([Chapter 2](data-representation.qmd#hicexperiment-class)), how to 
manipulate `HiCExperiment` objects ([Chapter 3](parsing.qmd)) and how to 
visualize Hi-C contact matrices as heatmaps ([Chapter 4](visualization.qmd)). 

The `HiContacts` package directly operates on `HiCExperiment` objects and
extends its usability by providing a comprehensive toolkit to analyze Hi-C data, 
focusing on four main topics:

- Contact matrix-centric analyses (this chapter)
- Interactions-centric analyses ([Chapter 6](interactions-centric.qmd))
- Structural feature annotations ([Chapter 7](topological-features.qmd))
- Hi-C visualization (see [previous chapter](visualization.qmd))

**Matrix-centric** analyses consider a `HiCExperiment` object from the 
"matrix" perspective to perform a range of matrix-based operations. 
This encompasses: 

- Computing observed/expected (O/E) map
- Computing auto-correlation map
- Smoothing out a contact map
- Merging multiple Hi-C maps together
- Comparing two Hi-C maps to each other

![](images/20230421134800.jpg)

::: {.callout-note}
## Note
- All the functions described in this chapter are **endomorphisms**: they 
take `HiCExperiment` objects as input and return modified `HiCExperiment` 
objects.
- Internally, most of the functions presented in this chapter make a call to 
`as.matrix(<HiCExperiment>)` to coerce it into a `matrix`. 
:::

::: {.callout-tip collapse="true"}
## Generating the example `hic` object 👇

To demonstrate `HiContacts` functionalities, we will create 
an `HiCExperiment` object from an example `.cool` file provided 
in the `HiContactsData` package. 

```{r eval = FALSE}
library(HiCExperiment)
library(HiContactsData)

# ---- This downloads an example `.mcool` file and caches it locally 
coolf <- HiContactsData('yeast_wt', 'mcool')

# ---- This creates a connection to the disk-stored `.mcool` file
cf <- CoolFile(coolf)
cf

# ---- This imports contacts from the chromosome `II` at resolution `2000`
hic <- import(cf, focus = 'II', resolution = 2000)
```

```{r}
hic
```
:::

## Operations in an individual matrix

### Balancing a raw interaction count map

Hi-C sequencing coverage is systematically affected by multiple confounding factors, e.g. 
density of restriction sites, GC%, genome mappability, etc..  Overall, it 
generally ends up not homogenous throughout the entire genome and this leads to 
artifacts in un-normalized `count` matrices. 

To correct for sequencing coverage heterogeneity of raw `count` maps, Hi-C 
data can be normalized using matrix balancing approaches 
(@Cournac_2012, @Imakaev_2012). This is generally done directly on the 
disk-stored matrices using out-of-memory strategies (e.g. with 
`cooler balance <.cool>`). However, if contact matrix files are imported 
into a `HiCExperiment` object but no `balanced` scores are available, 
in-memory balancing can be performed using the `normalize` function. This 
adds an extra `ICE` element in `scores` list (while the `interactions` 
themselves are unmodified).

```{r}
normalized_hic <- normalize(hic)
normalized_hic
```

It is possible to plot the different `scores` of the resulting object to 
visualize the newly computed `scores`. In this example, `ICE` scores 
should be nearly identical to `balanced` scores, which were originally imported 
from the disk-stored contact matrix. 

:::{.column-body-outset-right}
```{r out.width = '100%', fig.asp = .33}
patchwork::wrap_plots(
    plotMatrix(normalized_hic, use.scores = 'count', caption = FALSE),
    plotMatrix(normalized_hic, use.scores = 'balanced', caption = FALSE),
    plotMatrix(normalized_hic, use.scores = 'ICE', caption = FALSE), 
    nrow = 1
)
```
:::

### Computing observed/expected (O/E) map

The most prominent feature of a balanced Hi-C matrix is the strong main diagonal. 
This main diagonal is observed because interactions between immediate adjacent genomic 
loci are more prone to happen than interactions spanning longer genomic distances. 
This "expected" behavior is due to the polymer nature of the chromosomes being 
studied, and can be locally estimated using the distance-dependent 
interaction frequency (a.k.a. the "distance law", or P(s)). It can be used 
to compute an `expected` matrix on interactions. 

When it is desirable to "mask" this polymer behavior to emphasize topological 
structures formed by chromosomes, one can divide a given balanced matrix 
by its `expected` matrix, i.e. calculate the observed/expected (O/E) map. 
This is sometimes called "detrending", as it 
effectively removes the average polymer behavior from the balanced matrix. 

The `detrend` function performs this operation on a given `HiCExperiment` object. 
It adds two extra elements in `scores` list: `expected` and `detrended` metrics
(while the `interactions` themselves are unmodified). 

```{r}
detrended_hic <- detrend(hic)
detrended_hic
```

Topological features will be visually more prominent in the O/E `detrended` Hi-C map. 

:::{.column-page-right}
```{r out.width = '100%', fig.asp = .33}
patchwork::wrap_plots(
    plotMatrix(detrended_hic, use.scores = 'balanced', scale = 'log10', limits = c(-3.5, -1.2), caption = FALSE),
    plotMatrix(detrended_hic, use.scores = 'expected', scale = 'log10', limits = c(-3.5, -1.2), caption = FALSE),
    plotMatrix(detrended_hic, use.scores = 'detrended', scale = 'linear', limits = c(-1, 1), cmap = bwrColors(), caption = FALSE), 
    nrow = 1
)
```
:::

::: {.callout-note}
## Scale for `detrended` scores
- `expected` scores are in `linear` scale and ± in the same amplitude than `balanced` scores;
- `detrended` scores are in `log2` scale, in general approximately centered around 0. When plotting `detrended` scores, 
`scale = linear` should be set to prevent the default `log10` scaling. 
:::

### Computing autocorrelated map 

Correlation matrices are often calculated from balanced Hi-C matrices. 
For instance, in genomes composed of eu- and heterochromatin, a correlation 
matrix can be used to reveal a checkerboard pattern emphasizing the segregation 
of chromatin into two A/B compartments (@Lieberman_Aiden_2009). 

The `autocorrelate` function is used to compute a correlation matrix of a 
`HiCExperiment` object. For each pair of interacting loci, the `autocorrelated` 
score represents the correlation between their respective interaction profiles 
with the rest of the genome. 

```{r}
autocorr_hic <- autocorrelate(hic)
autocorr_hic
```

Since these metrics represent correlation scores, they range between `-1` and `1`. 
Two loci with an `autocorrelated` score close to `-1` have anti-correlated 
interaction profiles, while two loci with a `autocorrelated` score close to `1`
are likely to interact with shared targets. 

```{r}
summary(scores(autocorr_hic, 'autocorrelated'))
```

Correlated and anti-correlated loci will be visually represented in the 
`autocorrelated` Hi-C map in red and blue pixels, respectively. 

::: {.callout-note}
## Note
Here we have illustrated how to compute an autocorrelation matrix from a 
`HiCExperiment` object using the example **yeast** Hi-C experiment. 
Bear in mind that this is unusual and not very useful, as yeast chromatin 
is not segregated in two compartments but rather follows a Rabl 
conformation (@Duan_2010). An example of autocorrelation map 
from a vertebrate Hi-C experiment (for which chromatin is segregated in 
A/B compartments) is shown in [Chapter 10](workflow-chicken.qmd).
:::

```{r}
plotMatrix(
    autocorr_hic, 
    use.scores = 'autocorrelated', 
    scale = 'linear', 
    limits = c(-0.4, 0.4), 
    cmap = bgrColors()
)
```

::: {.callout-note}
## Scale for `autocorrelated` scores
- `autocorrelated` scores are in `linear` scale, in general approximately centered around 0. When plotting `autocorrelated` scores, 
`scale = linear` should be set to prevent the default `log10` scaling. 
- `limits` should be manually set to `c(-x, x)` (`0 < x <= 1`) to ensure 
that the color range is effectively centered on `0`. 
:::

### Despeckling (smoothing out) a contact map

Shallow-sequenced Hi-C libraries or matrices binned with an overly small bin 
size sometimes produce “grainy” Hi-C maps with noisy backgrounds. A grainy 
map may also be obtained when dividing two matrices, e.g. when 
computing the O/E ratio with `detrend`. This is particularly true for 
sparser long-range interactions. To overcome such limitations, `HiCExperiment` 
objects can be "`despeckle`d" to smooth out focal speckles.  

```{r}
hic2 <- detrend(hic['II:400000-700000'])
hic2 <- despeckle(hic2, use.scores = 'detrended', focal.size = 2)
hic2
```

The added `<use.scores>.despeckled` scores correspond to scores averaged 
using a window, whose width is provided with the `focal.size` argument. This 
results in a smoother Hi-C heatmap, effectively removing the "speckles" 
observed at longer range. 

:::{.column-page-right}
```{r out.width = '100%', fig.asp = .33}
library(InteractionSet)
loops <- system.file('extdata', 'S288C-loops.bedpe', package = 'HiCExperiment') |> 
    import() |> 
    makeGInteractionsFromGRangesPairs()
borders <- system.file('extdata', 'S288C-borders.bed', package = 'HiCExperiment') |> 
    import()
patchwork::wrap_plots(
    plotMatrix(hic2, caption = FALSE),
    plotMatrix(hic2, use.scores = 'detrended', scale = 'linear', limits = c(-1, 1), caption = FALSE),
    plotMatrix(
        hic2, 
        use.scores = 'detrended.despeckled', 
        scale = 'linear', 
        limits = c(-1, 1), 
        caption = FALSE, 
        loops = loops, 
        borders = borders
    ),
    nrow = 1
)
```
:::

::: {.callout-note}
## Scale for `despeckled` scores
`despeckled` scores are in the same scale than the `scores` they were computed 
from. 
:::

## Operations between multiple matrices

### Merging maps

Hi-C libraries are often sequenced in multiple rounds, for example when 
high genome coverage is required. This results in multiple contact matrix 
files being generated. The `merge` function can be used to bind 
several `HiCExperiment` objects into a single one.

The different `HiCExperiment` objects do not need to all have identical
`regions`, as shown in the following example. 

```{r}
hic_sub1 <- subsetByOverlaps(hic, GRanges("II:100001-200000"))
hic_sub2 <- subsetByOverlaps(hic, GRanges("II:300001-400000"))
bound_hic <- merge(hic_sub1, hic_sub2)
plotMatrix(bound_hic)
```

### Computing ratio between two maps

Comparing two Hi-C maps can be useful to infer which genomic loci 
are differentially interacting between experimental conditions. Comparing 
two `HiCExperiment` objects can be done in `R` using the `divide` function. 

For example, we can divide the *eco1* mutant Hi-C data by wild-type Hi-C 
dataset using the `divide` function. 

```{r eval = FALSE}
hic_eco1 <- import(
    CoolFile(HiContactsData('yeast_eco1', 'mcool')), 
    focus = 'II', 
    resolution = 2000
)
```

```{r}
div_contacts <- divide(hic_eco1, by = hic) 
div_contacts
```

We can visually compare wild-type and *eco1* maps side by side (left) and 
their ratio map (right). This highlights the depletion of short-range and 
increase of long-range interactions in the *eco1* dataset. 

```{r out.width = '100%', fig.asp = .5}
cowplot::plot_grid(
    plotMatrix(hic_eco1, compare.to = hic, limits = c(-4, -1)), 
    plotMatrix(
        div_contacts, 
        use.scores = 'balanced.fc', 
        scale = 'log2', 
        limits = c(-1, 1),
        cmap = bwrColors()
    )
)
```
