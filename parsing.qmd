# Manipulating Hi-C data in R

```{r}
#| echo: false
#| results: "hide"
#| message: false
#| warning: false
source("_common.R")
library(ggplot2)
library(GenomicRanges)
library(InteractionSet)
library(HiCExperiment)
library(HiContactsData)
coolf <- HiContactsData('yeast_wt', 'mcool')
cf <- CoolFile(coolf)
hicf <- HiContactsData('yeast_wt', 'hic')
hicpromatrixf <- HiContactsData('yeast_wt', 'hicpro_matrix')
hicproregionsf <- HiContactsData('yeast_wt', 'hicpro_bed')
pairsf <- HiContactsData('yeast_wt', 'pairs.gz')
hic <- contacts_yeast(full = TRUE)
```

::: {.callout-note}
## Aims
This chapter focuses on: 

- The key concepts and best practices when handling a `HiCExperiment` object
- The different methods to subset a `HiCExperiment` object
- How to "move around" a contact matrix (disk-stored) in a memory-efficient manner
:::

::: {.callout-important}
## Important reminder
- An `HiCExperiment` object allows parsing of a disk-stored contact matrix.
- An `HiCExperiment` object operates by wrapping together (1) a `ContactFile` 
(i.e. a connection to a disk-stored data file) and (2) a `GInteractions` 
generated by parsing the data file.  
:::

::: {.callout-warning collapse="true"}
## Recap on `HiCExperiment` structure ðŸ‘‡

- Creating a connection to a disk-stored contact matrix: 

```{r eval = FALSE}
# coolf <- "<path-to-disk-stored-contact-matrix.cool>"
coolf <- HiContactsData('yeast_wt', 'mcool')
cf <- CoolFile(coolf)
availableResolutions(cf)

availableChromosomes(cf)
```

- Importing a contact matrix over a specific genomic location, at a given resolution: 

```{r}
hic <- import(cf, focus = 'II:10000-50000', resolution = 4000)
hic
```

- Recovering genomic interactions stored in a `HiCExperiment`: 

```{r}
interactions(hic)
```
:::

## Key concepts and best practices


## Subsetting methods


## Moving aroung a disk-stored contact matrix
