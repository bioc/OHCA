---
filters:
  - _extensions/pandoc-ext/section-bibliographies/section-bibliographies.lua
reference-section-title: References
bibliography: bibliography.bib
---

# Interactions-centric analysis

```{r}
#| echo: false
#| results: "hide"
#| message: false
#| warning: false
source("_common.R")
library(dplyr)
library(ggplot2)
library(GenomicRanges)
library(InteractionSet)
library(HiCExperiment)
library(HiContactsData)
library(HiContacts)
library(rtracklayer)
coolf <- HiContactsData('yeast_wt', 'mcool')
pairsf <- HiContactsData('yeast_wt', 'pairs.gz')
pf <- PairsFile(pairsf)
cf <- CoolFile(coolf)
hic <- import(cf, focus = 'II', resolution = 2000)
full_hic <- import(cf, resolution = 2000)
data(centros_yeast)
topologicalFeatures(hic, 'centromeres') <- centros_yeast
eco1_hic <- import(
    CoolFile(HiContactsData('yeast_eco1', 'mcool')), 
    focus = 'II', 
    resolution = 2000
)
eco1_pairsf <- HiContactsData('yeast_eco1', 'pairs.gz')
eco1_pf <- PairsFile(eco1_pairsf)
```

::: {.callout-note}
## Aims
This chapter focuses on the various analytical tools offered by `HiContacts`
to compute interaction-related metrics from a `HiCExperiment` object.
:::

**Interaction-centric** analyses consider a `HiCExperiment` object from the 
"interactions" perspective to perform a range of operations on genomic interactions.  
This encompasses: 

- Computing the "distance law" (a.k.a. P(s)), i.e. the distance-dependent interaction frequency
- Computing profiles of interactions between a locus of interest and the rest of the genome, (a.k.a. virtual 4C profiles)
- Computing cis/trans interaction ratios
- Computing distribution of distance-dependent interaction frequency along chromosomes, a.k.a. scalograms 

::: {.callout-note}
## Note
- Contrary to functions presented in the previous chapter, the functions 
described in this chapter are **not**: they 
take `HiCExperiment` objects as input and generally return data frames rather 
than modified `HiCExperiment` objects. 
- Internally, most of the functions presented in this chapter make a call to 
`interactions(<HiCExperiment>)` to coerce it into `GInteractions`. 
:::

::: {.callout-tip collapse="true"}
## Generating the example `hic` object ðŸ‘‡

To demonstrate `HiContacts` functionalities, we will create 
an `HiCExperiment` object from an example `.cool` file provided 
in the `HiContactsData` package. 

```{r eval = FALSE}
library(HiCExperiment)
library(HiContactsData)

# ---- This downloads example `.mcool` and `.pairs` files and caches them locally 
coolf <- HiContactsData('yeast_wt', 'mcool')
pairsf <- HiContactsData('yeast_wt', 'pairs.gz')

# ---- This creates a connection to the disk-stored `.mcool` file
cf <- CoolFile(coolf)
cf

# ---- This creates a connection to the disk-stored `.pairs` file
pf <- PairsFile(pairsf)
pf

# ---- This imports contacts from the chromosome `II` at resolution `2000`
hic <- import(cf, focus = 'II', resolution = 2000)
```

```{r}
hic
```
:::

## Distance law(s)

### P(s) from a single `.pairs` file

Distance laws are generally computed directly from `.pairs` files. This is 
because the `.pairs` files are at 1-bp resolution whereas the contact matrices 
(for example from `.cool` files) are binned at a minimum resolution. 

An example `.pairs` file can be fetched from the `ExperimentHub` database
using the `HiContactsData` package. 

```{r eval = FALSE}
library(HiCExperiment)
library(HiContactsData)
pairsf <- HiContactsData('yeast_wt', 'pairs.gz')
pf <- PairsFile(pairsf)
```

```{r}
pf
```

If needed, `PairsFile` connections can be imported directly into a `GInteractions` object 
with `import()`. 

```{r}
import(pf)
```

We can compute a P(s) per chromosome from this `.pairs` file using the `distanceLaw` function.

```{r}
library(HiContacts)
ps <- distanceLaw(pf, by_chr = TRUE) 
ps
```

The `plotPs()` and `plotPsSlope()` functions are convenient `ggplot2`-based functions
with pre-configured settings optimized for P(s) visualization.

```{r ps}
library(ggplot2)
plotPs(ps, aes(x = binned_distance, y = norm_p, color = chr))
plotPsSlope(ps, aes(x = binned_distance, y = slope, color = chr))
```

### P(s) for multiple `.pairs` files

Let's first import a second example dataset. We'll import pairs identified in a 
*eco1* yeast mutant. 

```{r eval = FALSE}
eco1_pairsf <- HiContactsData('yeast_eco1', 'pairs.gz')
eco1_pf <- PairsFile(eco1_pairsf)
```

```{r}
eco1_ps <- distanceLaw(eco1_pf, by_chr = TRUE) 
eco1_ps
```

A little data wrangling can help plotting the distance laws for 2 different samples 
in the same plot. 

```{r}
library(dplyr)
merged_ps <- rbind(
    ps |> mutate(sample = 'WT'), 
    eco1_ps |> mutate(sample = 'eco1')
)
plotPs(merged_ps, aes(x = binned_distance, y = norm_p, color = sample, linetype = chr)) + 
    scale_color_manual(values = c('#c6c6c6', '#ca0000'))
plotPsSlope(merged_ps, aes(x = binned_distance, y = slope, color = sample, linetype = chr)) + 
    scale_color_manual(values = c('#c6c6c6', '#ca0000'))
```

### P(s) from `HiCExperiment` objects

Alternatively, distance laws can be computed from binned matrices directly by 
providing `HiCExperiment` objects. For deeply sequenced datasets, this can be significantly faster 
than when using original `.pairs` files, but the smoothness of the resulting 
curves will be greatly impacted, notably at short distances. 

```{r}
ps_from_hic <- distanceLaw(hic, by_chr = TRUE) 
plotPs(ps_from_hic, aes(x = binned_distance, y = norm_p))
plotPsSlope(ps_from_hic, aes(x = binned_distance, y = slope))
```

## Cis/trans ratios

The ratio between cis interactions and trans interactions is often used to 
assess the overall quality of a Hi-C dataset. It can be computed *per chromosome* 
using the `cisTransRatio()` function. You will need to provide a **genome-wide** `HiCExperiment` to estimate
cis/trans ratios!

```{r}
full_hic <- import(cf, resolution = 2000)
ct <- cisTransRatio(full_hic) 
ct
```

It can be plotted using `ggplot2`-based visualization functions.

```{r}
ggplot(ct, aes(x = chr, y = cis_pct)) + 
    geom_col(position = position_stack()) + 
    theme_bw() + 
    guides(x=guide_axis(angle = 90)) + 
    scale_y_continuous(labels = scales::percent) + 
    labs(x = 'Chromosomes', y = '% of cis contacts')
```

Cis/trans contact ratios will greatly vary **depending on the cell cycle 
phase the sample is in!** For instance, chromosomes during the mitosis phase 
of the cell cycle have very little trans contacts, due to their structural 
organization and individualization. 

## Virtual 4C profiles

Interaction profile of a genomic locus of interest with its surrounding 
environment or the rest of the genome is frequently generated. In some cases, this can 
help in identifying and/or comparing regulatory or structural interactions. 

For instance, we can compute the genome-wide virtual 4C profile of interactions 
anchored at the centromere in chromosome `II` (located at ~ 238kb). 

```{r}
library(GenomicRanges)
v4C <- virtual4C(full_hic, viewpoint = GRanges("II:230001-240000"))
v4C
```

`ggplot2` can be used to visualize the 4C-like profile over multiple chromosomes.

:::{.column-page-right}
```{r fig.asp = 0.7, out.width = '100%'}
df <- as_tibble(v4C)
ggplot(df, aes(x = center, y = score)) + 
    geom_area(position = "identity", alpha = 0.5) + 
    theme_bw() + 
    labs(x = "Position", y = "Contacts with viewpoint") +
    scale_x_continuous(labels = scales::unit_format(unit = "M", scale = 1e-06)) + 
    facet_wrap(~seqnames, scales = 'free_y')
```
:::

This clearly highlights trans interactions of the chromosome `II` centromere 
with the centromeres from other chromosomes. 

## Scalograms

Scalograms were introduced in @Lioy_2018 to investigate distance-dependent 
contact frequencies for individual genomic bins along chromosomes.  
To generate a scalogram, one needs to provide a `HiCExperiment` object 
with a valid associated `pairsFile`. 

```{r}
pairsFile(hic) <- pairsf
scalo <- scalogram(hic) 
plotScalogram(scalo |> filter(chr == 'II'), ylim = c(1e3, 1e5))
```

Several scalograms can be plotted together to compare distance-dependent 
contact frequencies along a given chromosome in different samples. 

:::{.column-page-right}
```{r fig.asp = .4, out.width = '100%'}
eco1_hic <- import(
    CoolFile(HiContactsData('yeast_eco1', 'mcool')), 
    focus = 'II', 
    resolution = 2000
)
eco1_pairsf <- HiContactsData('yeast_eco1', 'pairs.gz')
pairsFile(eco1_hic) <- eco1_pairsf
eco1_scalo <- scalogram(eco1_hic) 
merged_scalo <- rbind(
    scalo |> mutate(sample = 'WT'), 
    eco1_scalo |> mutate(sample = 'eco1')
)
plotScalogram(merged_scalo |> filter(chr == 'II'), ylim = c(1e3, 1e5)) + 
    facet_grid(~sample)
```
:::

This example points out the overall longer interactions within the long 
arm of the chromosome `II` in an `eco1` mutant. 

